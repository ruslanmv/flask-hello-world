schemaVersion: 2.2.0
metadata:
  name: python
  projectType: Python
  displayName: Python
  icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
  description: |
    Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.
    Its high-level built in data structures, combined with dynamic typing and dynamic binding, make it very attractive for Rapid Application Development,
    as well as for use as a scripting or glue language to connect existing components together.
  language: Python
  version: 1.0.1
  provider: Red Hat
  tags:
    - Python
    - Pip
    - Flask
  supportUrl: https://github.com/devfile-samples/devfile-support#support-information
  attributes:
    alpha.dockerimage-port: 8081

parent:
  id: python
  registryUrl: https://registry.devfile.io
  version: 2.1.0

components:
  # This component defines the OpenShift BuildConfig manifest with resource specifications.
  # The actual YAML content should be in a file named 'openshift-buildconfig.yaml' in your project.
  - name: python-buildconfig-k8s
    kubernetes:
      uri: openshift-buildconfig.yaml

  # This component defines your application's runtime deployment.
  # The actual YAML content should be in 'deploy.yaml'.
  - name: kubernetes-deploy
    kubernetes:
      uri: deploy.yaml
      endpoints:
        - name: http-8081
          targetPort: 8081
          path: /          # Path for the endpoint, if applicable
          # secure: true # 'secure' is for TLS. Set based on your service. Assumed false if not specified or handled by route.
    attributes:
      # These attributes can be used by tools to override values in deploy.yaml
      deployment/replicas: 1
      deployment/cpuRequest: "10m"
      deployment/memoryRequest: "50Mi"
      deployment/cpuLimit: "100m"
      deployment/memoryLimit: "128Mi"
      # Note: 'deployment/container-port' is not a standard devfile attribute for setting the port
      # in the Kubernetes manifest. Ensure the container port is correctly defined within 'deploy.yaml'.
      # The 'endpoints' field above is the standard way to declare discoverable ports.

commands:
  # 1. Apply the BuildConfig definition to the cluster.
  - id: apply-buildconfig
    apply:
      component: python-buildconfig-k8s

  # 2. Start the OpenShift build.
  # This command executes 'oc start-build'. It requires 'oc' CLI to be available
  # in the execution environment (e.g., a tools container or the environment where devfile commands are run).
  # It assumes the BuildConfig created is named 'python-app-build' (matching openshift-buildconfig.yaml).
  - id: start-build
    exec:
      # An exec command needs a component to run in.
      # If you have a tools container defined with 'oc', use it here.
      # For this example, we'll assume 'oc' is in the PATH of the environment running the devfile command.
      # If your devfile tool (like odo) provides a default exec container or context, this might work.
      # Otherwise, you may need to define a specific container component with 'oc' installed.
      # Using 'kubernetes-deploy' as a placeholder component for context, but ideally, this would be a tools image.
      component: kubernetes-deploy # Or a dedicated tools component
      commandLine: "oc start-build python-app-build --from-dir=. --follow"
      workingDir: ${PROJECT_SOURCE} # Devfile v2 variable for project root
      group:
        kind: build
        isDefault: false # Set to true if this is the default build command

  # 3. Deploy the application using the built image.
  - id: deployk8s
    apply:
      component: kubernetes-deploy

  # Composite command for a full build and deploy sequence.
  - id: deploy
    composite:
      commands:
        - apply-buildconfig
        - start-build
        - deployk8s
      group:
        kind: deploy
        isDefault: true